from collections import defaultdict

def anagrams(s1, s2):
  hashmap1 = defaultdict(int)
  hashmap2 = defaultdict(int)
  
  if len(s1) != len(s2):
    return False
  for i in range(len(s1)):
      hashmap1[s1[i]] += 1
      hashmap2[s2[i]] += 1
  
  return hashmap1 == hashmap2


def linked_list_find(head, target):
  current = head
  while current is not None:
    if current.val == target:
      return True
    current = current.next
  return False
      
class Node:
  def __init__(self, val):
    self.val = val
    self.next = None

def merge_lists(head_1, head_2):
  tail = None
  variable = None
  if head_1.val > head_2.val:
    tail = head_2
    current_2 = head_2.next
    current_1 = head_1
    variable = head_2
  else:
    tail = head_1
    current_1 = head_1.next
    current_2 = head_2
    variable = head_1
    
  while current_2 and current_1:
    if current_1.val > current_2.val:
      tail.next = current_2
      current_2 = current_2.next
    else:
      tail.next = current_1
      current_1 = current_1.next
    tail = tail.next
    
  if current_1:
    tail.next = current_1
  elif current_2:
    tail.next = current_2
  return variable

# class Node:
#   def __init__(self, val):
#     self.val = val
#     self.left = None
#     self.right = None
def bottom_right_value(root):
  max_depth = -1
  max_col = 0
  result = None
  def dfs(node, depth, col):
    nonlocal result
    nonlocal max_depth
    nonlocal max_col
    if result == None:
      result = node.val
    depth += 1
    if node.left or node.right:
      if node.left:
        dfs(node.left, depth, col-1)
      if node.right:
        dfs(node.right, depth, col+1)
    else:
      if depth >= max_depth:
        max_depth = depth
        result = node.val
      elif depth == max_depth and col > max_col:
        max_col = col
        result = node.val
  if root:
    dfs(root, max_depth, max_col)
  return result

class Node:
  def __init__(self, val):
    self.val = val
    self.next = None

def add_lists(head_1, head_2):
  current_1 = head_1
  current_2 = head_2
  result = None
  remainder = 0
  result_current = None
  while current_1 and current_2:
    sum = current_1.val + current_2.val + remainder
    remainder = 0
    current_1 = current_1.next
    current_2 = current_2.next
    while sum >= 10:
      sum -= 10
      remainder += 1
    new_node = Node(sum)
    if result:
      result_current.next = new_node
      result_current = result_current.next
    else:
      result = new_node
      result_current = result
  while current_1:
    sum = current_1.val + remainder
    remainder = 0
    while sum >= 10:
      sum -= 10
      remainder += 1
    new_node = Node(sum)
    result_current.next = new_node
    result_current = result_current.next
    current_1 = current_1.next
  while current_2:
    sum = current_2.val + remainder
    remainder = 0
    while sum >= 10:
      sum -= 10
      remainder += 1
    new_node = Node(sum)
    result_current.next = new_node
    result_current = result_current.next
    current_2 = current_2.next
  if remainder:
    remainder_node = Node(remainder)
    result_current.next = remainder_node
  return result


from collections import deque
def connected_components_count(graph):
  result = 0
  visited = set()

  def bfs(node):
    nonlocal result 
    nonlocal visited
    if not node in visited:
      result += 1
      queue = deque([node])
      while queue:
        current = queue.popleft()
        visited.add(current)
        for neighbor in graph[current]:
          if not neighbor in visited:
            queue.append(neighbor)

  for node in graph.keys():
    bfs(node)

  return result

from collections import deque, defaultdict

def build_graph(edges):
  graph = defaultdict(list)
  for edge in edges:
    graph[edge[0]].append(edge[1])
    graph[edge[1]].append(edge[0])

  return graph

def has_path(graph, src, dst):
  visited = set()
  queue = deque([ src ])
  while queue:
    current = queue.popleft()
    visited.add(current)
    for neighbor in graph[current]:
      if neighbor == dst:
        return True
      if not neighbor in visited:
        queue.append(neighbor)

  return False

def undirected_path(edges, node_A, node_B):
  graph = build_graph(edges)
  return has_path(graph, node_A, node_B)
from collections import deque
def has_path(graph, src, dst):
  visited = set()
  queue = deque([ src ])
  while queue:
    current = queue.popleft()
    visited.add(current)
    for neighbor in graph[current]:
      if neighbor == dst:
        return True
      if not neighbor in visited:
        queue.append(neighbor)

  return False

from collections import deque
def largest_component(graph):
  visited = set()
  largest = 0
  def bfs(node):
    nonlocal visited
    size = 0
    if not node in visited:  
      queue = deque([node])
      visited.add(node)
      while queue:
        current = queue.popleft()
        size += 1
        for neighbor in graph[current]:
          if not neighbor in visited:
            queue.append(neighbor)
            visited.add(neighbor)
    return size
  for node in graph.keys():
    resize = bfs(node)
    largest = max(largest, resize)
  return largest

# class Node:
#   def __init__(self, val):
#     self.val = val
#     self.left = None
#     self.right = None

def path_finder(root, target):
  result = []
  def dfs(node):
    nonlocal result
    if not node:
      return False
    if node.val == target:
      result.append(node.val)
      return True
    if dfs(node.left) or dfs(node.right):
      result.append(node.val)
      return True
  dfs(root)
  if result:
    return list(reversed(result))

from collections import defaultdict, deque
def shortest_path(edges, node_A, node_B):
  queue = deque([(node_A, 0)])
  graph = build_graph(edges)
  visited = set()
  while queue:
    node, dist = queue.popleft()
    visited.add(node)
    if node == node_B:
      return dist
    for neighbor in graph[node]:
      if neighbor not in visited:
        queue.append((neighbor, dist + 1))
  return -1
    
def build_graph(edges):
  graph = defaultdict(list)

  for edge in edges:
    node_from, node_to = edge
    graph[node_from].append(node_to)
    graph[node_to].append(node_from)
  return graph

from collections import deque, defaultdict

def closest_carrot(grid, starting_row, starting_col):
  visited = defaultdict(set)
  return bfs((starting_row, starting_col, 0), grid, visited)
  
def bfs(coords, grid, visited):
  queue = deque([coords])
  dirs = (
    (1, 0),
    (0, 1),
    (-1, 0),
    (0, -1)
  )
  while queue:
    row_i, col_i, depth = queue.popleft()
    for dir in dirs:
      x, y = dir
      new_coord = (row_i + x, col_i + y, depth+1)
      x, y, new_depth = new_coord
      if inbounds(new_coord, grid) and grid[x][y] == 'O' and y not in visited[x]:
        queue.append(new_coord)
        visited[x].add(y)
      elif inbounds(new_coord, grid) and grid[x][y] == 'C':
        return new_depth
  return -1
        
def inbounds(coords, grid):
  row_i, col_i, depth = coords
  if row_i < 0 or row_i > len(grid) - 1:
    return False
  if col_i < 0 or col_i > len(grid[0]) - 1:
    return False
  return True

from collections import defaultdict, deque

def minimum_island(grid):
  min_size = float("inf")
  visited = defaultdict(set)
  for i, r in enumerate(grid):
    for j, root in enumerate(r):
      if root == 'L' and j not in visited[i]:
        visited[i].add(j)
        min_size = min(min_size,bfs((i,j), visited, grid))
        
  return min_size

def bfs(coords, visited, grid):
  dirs = (
    (1, 0),
    (0, 1),
    (-1, 0),
    (0, -1)
  )
  queue = deque([coords])
  size = 0
  while queue:
    row_i, col_i = queue.popleft()
    size += 1
    for dir in dirs:
      x, y = dir
      new_coord = (row_i + x, col_i + y)
      x, y = new_coord
      if inbounds(new_coord, grid) and grid[x][y] == 'L' and y not in visited[x]:
        queue.append(new_coord)
        visited[x].add(y)
  return size
        
def inbounds(coords, grid):
  row_i, col_i = coords
  if row_i < 0 or row_i > len(grid) - 1:
    return False
  if col_i < 0 or col_i > len(grid[0]) - 1:
    return False
  return True
from collections import defaultdict, deque
def island_count(grid):
  result = 0
  visited = defaultdict(set)
  for i, r in enumerate(grid):
    for j, root in enumerate(r):
      if root == 'L' and j not in visited[i]:
        bfs((i,j), visited, grid)
        result += 1
  return result

def bfs(coords, visited, grid):
  dirs = (
    (1, 0),
    (0, 1),
    (-1, 0),
    (0, -1)
  )
  queue = deque([coords])
  while queue:
    row_i, col_i = queue.popleft()
    visited[row_i].add(col_i)
    for dir in dirs:
      x, y = dir
      new_coord = (row_i + x, col_i + y)
      x, y = new_coord
      if inbounds(new_coord, grid) and grid[x][y] == 'L' and y not in visited[x]:
        queue.append(new_coord)
        
        
def inbounds(coords, grid):
  row_i, col_i = coords
  if row_i < 0 or row_i > len(grid) - 1:
    return False
  if col_i < 0 or col_i > len(grid[0]) - 1:
    return False
  return True

def longest_path(graph):
  memo = {}
  res = 0
  def dfs(node, visited, depth):
    if node in memo:
      return memo[node]
    else:
      if node in visited:
        return memo[node]
      elif graph[node]:
        visited.add(node)
        max_depth = 0
        for neighbor in graph[node]:
          max_depth = max(max_depth, dfs(neighbor, visited, depth))
        memo[node] = max_depth + 1
        return memo[node]
      else:
        visited.add(node)
        memo[node] = depth
        return depth
  for root in graph.keys():
    res = max(res, dfs(root, set(), 0))
  return res

from collections import defaultdict

def semesters_required(num_courses, prereqs):
  if not prereqs:
    return 1
  graph = build_graph(prereqs)
  return longest_path(graph)

def build_graph(prereqs):
  graph = defaultdict(list)
  for edge in prereqs:
    f, t = edge
    graph[t].append(f)
  print(graph)
  return graph

def longest_path(graph):
  memo = {}
  res = 0
  def dfs(node, visited, depth):
    if node in memo:
      return memo[node]
    else:
      if node in visited:
        return memo[node]
      elif node in set(graph.keys()):
        visited.add(node)
        max_depth = 0
        for neighbor in graph[node]:
          max_depth = max(max_depth, dfs(neighbor, visited, depth))
        memo[node] = max_depth + 1
        return memo[node]
      else:
        visited.add(node)
        memo[node] = depth
        return depth
  for root in graph.keys():
    print(graph)
    res = max(res, dfs(root, set(), 1))
    print(graph)
  return res

from collections import deque
DIRS = [
  (0,1),
  (1,0),
  (-1,0),
  (0,-1)
]

def best_bridge(grid):
  island_coords = find_island(grid)
  length = float("inf")
  for coord in island_coords:
    res = build_bridge_bfs(coord, grid, island_coords)
    if res:
      length = min(length, res)
  return length

def find_island(grid):
  for row_i, row in enumerate(grid):
    for col_i, ele in enumerate(row):
      if grid[row_i][col_i]=="L":
        return find_island_bfs((row_i,col_i), grid)
    
def find_island_bfs(incoming_coords, grid):
  visited = set()
  island_coords = []
  queue = deque([incoming_coords])
  while queue:
    coords = queue.popleft()
    visited.add(coords)
    island_coords.append(coords)
    row, col = coords
    for dir in DIRS:
      new_row = row + dir[0]
      new_col = col + dir[1]
      new_coords = (new_row, new_col)
      if inbounds(new_coords, grid) and grid[new_row][new_col]=="L" and not new_coords in visited:
        queue.append(new_coords)
  return island_coords

def build_bridge_bfs(incoming_coords, grid, island_coords):
  visited = set()
  queue = deque([(incoming_coords[0], incoming_coords[1], -1)])
  while queue:
    coords = queue.popleft()
    row, col, depth = coords
    visited.add((row, col))
    depth += 1
    for dir in DIRS:
      new_row = row + dir[0]
      new_col = col + dir[1]
      new_coords = (new_row, new_col)
      if inbounds(new_coords, grid) and grid[new_row][new_col]=="L" and not new_coords in island_coords:
        return depth
      elif inbounds(new_coords, grid) and grid[new_row][new_col]=="W" and not new_coords in visited:
        queue.append((new_row, new_col, depth))
        
def inbounds(coords, grid):
  row,col = coords
  if  0 <= row < len(grid) and 0 <= col < len(grid[0]):
    return True
  return False

def has_cycle(graph):
  black = set()
  for node in graph.keys():
    if dfs(node, graph, black, set()):
      return True
  return False

def dfs(node, graph, black, grey):
  if node in black:
    return False
  elif node in grey:
    return True
  else:
    grey.add(node)
    if graph[node]:
      for neighbor in graph[node]:
        if dfs(neighbor, graph, black, grey):
          return True
    black.add(node)
    grey.remove(node)
    return False
